#ifndef MATERIALS_H
#define MATERIALS_H

#include "Defines.compute"

//=======================================
//=-------------------------------------=
//=----------Util Methods---------------=
//=-------------------------------------=
//=======================================

float3 refract(float3 inc_dir, float3 normal, float ior_qout)
{
    float cos_theta = min(dot(-inc_dir, normal), 1.0);
    float3 r_out_perp = ior_qout * (inc_dir + cos_theta * normal);
    float3 r_out_parallel = -sqrt(abs(1.0 - dot(r_out_perp, r_out_perp))) * normal;
    return r_out_perp + r_out_parallel;
}

float Schlicks_Approx(float cosine, float refractive_index)
{
    float r0 = (1.0 - refractive_index) / (1.0 + refractive_index);
    r0 = r0 * r0;
    return r0 + (1.0 - r0) * pow(1.0 - cosine, 5.0);
}


//=======================================
//=-------------------------------------=
//=------------Materials----------------=
//=-------------------------------------=
//=======================================

interface iMaterial
{
    bool Scatter(Ray inRay, RayHit hit, inout float3 attenuation, inout RayBuffer rb);
};


struct MaterialBufferObject
{
    float3 albedo;
    float3 specular;
    float3 emissive;
    float3 transmission;
    float ior;
};


StructuredBuffer<MaterialBufferObject> _Materials;

class BufferMaterial
{
    void EvaluatePhong(const MaterialBufferObject mat, const Ray inRay, const RayHit hit, inout RayBuffer rb)
    {
        const float sum = energy(mat.specular) + energy(mat.albedo);
        const float specChance = energy(mat.specular) / sum;
        const float diffChance = energy(mat.albedo) / sum;

        const float3 rayOrigin = hit.position + hit.normal * 0.0001f;
        const float3 reflected = reflect(inRay.direction, hit.normal);
        Ray reflectionRay;

        if (rand() < specChance) {
            //specular reflection
            const float alpha = 300000.f;
            const float scaling = (alpha + 2) / (alpha + 1);

            const float3 rayDirection = SampleHemisphere(reflected, alpha);
            reflectionRay = CreateRay(rayOrigin, rayDirection, RAYTYPE_REFLECTION);


            reflectionRay.energy = inRay.energy * mat.specular / specChance * sdot(hit.normal, rayDirection, scaling);
        }
        else {
            //diffuse reflection
            const float3 rayDirection = SampleHemisphere(hit.normal, 1.0f);
            reflectionRay = CreateRay(rayOrigin, rayDirection, RAYTYPE_REFLECTION);
            reflectionRay.energy = inRay.energy * mat.albedo / diffChance;
        }

        rb.Push(reflectionRay);
    }

    bool Scatter(int matID, Ray inRay, RayHit hit, inout float3 attenuation, inout RayBuffer rb)
    {
        MaterialBufferObject mat = _Materials[matID];
        
        attenuation = 0;
        
        //TODO uniform sampling and brdf evaluation

        if (any(mat.specular) || any(mat.albedo))
        {
            EvaluatePhong(mat, inRay, hit, rb);
        }
        else if (any(mat.transmission))
        {
            float3 rayOrigin = hit.position - hit.normal * 0.0001f;

            float refractive_index = hit.isFrontFace ? 1.0 / mat.ior : mat.ior;
            float cos_theta = min(dot(inRay.direction, -hit.normal), 1.0);
            float sin_theta = sqrt(1.0 - cos_theta * cos_theta);

            bool cannot_refract = sin_theta * refractive_index > 1.0;
            float Schlick_term = Schlicks_Approx(cos_theta, refractive_index);

            float3 rayDirection;

            if (cannot_refract || Schlick_term > rand())
            {
                rayDirection = reflect(inRay.direction, hit.normal);
            }
            else
            {
                rayDirection = refract(inRay.direction, hit.normal, refractive_index);
            }


            Ray transmissionRay = CreateRay(rayOrigin, rayDirection, RAYTYPE_TRANSMISSION);
            transmissionRay.energy = inRay.energy * mat.transmission;
            rb.Push(transmissionRay);
        }
        if (any(mat.emissive))
        {
            attenuation = mat.emissive;
        }
        
        return true;
    }
};
//=======================================
//=-------------------------------------=
//=------------OBSOLETE-----------------=
//=-------------------------------------=
//=======================================
/*class PerfectMirror : iMaterial
{
	
    float3 albedo;
    bool Scatter(Ray inRay, RayHit hit, inout float3 attenuation, inout Ray scatteredRay)
    {
        scatteredRay.origin = hit.position + hit.normal * 0.0001f;
        scatteredRay.direction = reflect(inRay.direction, hit.normal);
        scatteredRay.energy = inRay.energy * albedo;
        attenuation = float3(0.0f, 0.0f, 0.0f);
        return true;
    }
};

PerfectMirror CreateMirror(float3 color)
{
    PerfectMirror a;
    a.albedo = color;
    return a;
}

class LambertianDiffuse : iMaterial
{
    float3 albedo;

    bool Scatter(Ray inRay, RayHit hit, inout float3 attenuation, inout Ray scatteredRay)
    {
        scatteredRay.origin = hit.position + hit.normal * 0.0001f;
        scatteredRay.direction = SampleHemisphere(hit.normal);
        scatteredRay.energy = inRay.energy * 2.0f * albedo * saturate(dot(hit.normal, scatteredRay.direction));
        attenuation = float3(0.0f, 0.0f, 0.0f);
        return true;
    }
};

LambertianDiffuse CreateLambertian(float3 color)
{
    LambertianDiffuse a;
    a.albedo = color;
    return a;
}

class Emissive : iMaterial
{
    float3 emissive;
    
    bool Scatter(Ray inRay, RayHit hit, inout float3 attenuation, inout Ray scatteredRay)
    {
        scatteredRay.energy = float3(0.0f, 0.0f, 0.0f);
        attenuation = emissive;
        return true;
    }
};

Emissive CreateEmissive(float3 color)
{
    Emissive a;
    a.emissive = color;
    return a;
}*/
#endif